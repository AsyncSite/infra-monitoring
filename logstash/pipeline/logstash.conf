input {
  beats {
    port => 5044
  }
}

filter {
  # 1. 컨테이너 이름에서 서비스 이름 추출
  if [container][name] {
    # asyncsite-user-service -> user-service
    # asyncsite-user-service-mock -> user-service
    grok {
      match => { 
        "[container][name]" => "^asyncsite-(?<service_name>[a-zA-Z0-9-]+?)(-mock)?$" 
      }
      tag_on_failure => []
    }
    
    # service 필드 설정
    if [service_name] {
      mutate {
        add_field => { "service" => "%{[service_name]}" }
        remove_field => [ "service_name" ]
      }
    }
  }
  
  # 2. 로그 내용이 JSON인 경우 파싱
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "app_log"
      skip_on_invalid_json => true
    }
    
    # JSON 파싱 성공 시 필드 추출
    if [app_log] {
      # service 필드가 로그에 있으면 우선 사용
      if [app_log][service] {
        mutate {
          replace => { "service" => "%{[app_log][service]}" }
        }
      }
      
      # 기타 필요한 필드 추출
      if [app_log][level] {
        mutate {
          add_field => { "level" => "%{[app_log][level]}" }
        }
      }
      
      if [app_log][timestamp] {
        date {
          match => [ "[app_log][timestamp]", "ISO8601" ]
          target => "@timestamp"
        }
      }
      
      # 메시지 교체
      if [app_log][message] {
        mutate {
          replace => { "message" => "%{[app_log][message]}" }
        }
      }
      
      # 임시 필드 제거
      mutate {
        remove_field => [ "app_log" ]
      }
    }
  }
  
  # 3. service 필드가 없으면 unknown
  if ![service] {
    mutate {
      add_field => { "service" => "unknown" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "asyncsite-%{[service]}-%{+YYYY.MM.dd}"
    manage_template => false
  }
  
  # 디버깅용 - 개발 환경에서만 사용
  stdout { 
    codec => rubydebug {
      metadata => false
    }
  }
}
name: Deploy ELK Stack to Mini PC

on:
  push:
    branches:
      - main
      - 'feature/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 배포할 코드(설정 파일 포함)를 GitHub Actions 러너 환경으로 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 러너에 있는 설정 파일들을 원격 Mini PC로 복사합니다.
      - name: Copy config files to Mini PC
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.MINI_PC_HOST }}
          username: ${{ secrets.MINI_PC_USER }}
          key: ${{ secrets.MINI_PC_SSH_KEY }}
          port: 2222
          source: "./docker-compose.yml,./docker-compose.filebeat.yml,./docker-compose.filebeat.server.yml,./docker-compose.server.yml,./filebeat-server.yml,./logstash"
          target: "~/elk-stack"
          rm: true # 복사 전 원격 디렉터리 내용 삭제

      # 3. Mini PC에 접속하여 Docker Compose를 실행합니다.
      - name: Execute docker-compose on Mini PC
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.MINI_PC_HOST }}
          username: ${{ secrets.MINI_PC_USER }}
          key: ${{ secrets.MINI_PC_SSH_KEY }}
          port: 2222
          script: |
            cd ~/elk-stack
            
            # 1. 메인 ELK 스택 (Elasticsearch, Logstash, Kibana) 실행
            echo "Starting ELK Stack..."
            docker compose -f docker-compose.yml up -d
            
            # ELK 스택이 준비될 때까지 대기
            echo "Waiting for ELK stack to be ready..."
            sleep 30
            
            # ELK 스택 상태 확인
            echo "Checking ELK stack status..."
            docker ps | grep -E "(elasticsearch|logstash|kibana)" || echo "WARNING: ELK stack may not be running properly"
            
            # 2. Filebeat 설정 파일 권한 변경
            echo "Setting permissions for filebeat-server.yml..."
            chmod 644 filebeat-server.yml
            
            # 3. Filebeat 에이전트 재시작 (설정 변경 적용)
            echo "Restarting Filebeat Agent to apply new configuration..."
            # Stop ONLY filebeat containers
            echo "Stopping Filebeat containers..."
            docker stop asyncsite-filebeat-agent 2>/dev/null || true
            docker rm -v asyncsite-filebeat-agent 2>/dev/null || true
            # Remove any lingering data directory that might have locks
            docker volume ls -q | grep filebeat | xargs -r docker volume rm 2>/dev/null || true
            # Start fresh with project name to avoid conflicts
            docker compose -p filebeat -f docker-compose.filebeat.yml -f docker-compose.filebeat.server.yml up -d
            
            # Clean up old indices to resolve field type conflicts
            echo "Cleaning up Elasticsearch indices..."
            if docker ps | grep -q "elasticsearch"; then
              # List and delete filebeat indices one by one (Elasticsearch may not allow wildcard deletion)
              for index in $(docker exec elasticsearch curl -s "localhost:9200/_cat/indices" 2>/dev/null | grep "filebeat-" | awk '{print $3}'); do
                echo "Deleting index: $index"
                docker exec elasticsearch curl -X DELETE "localhost:9200/$index" 2>/dev/null || true
              done
              # NOTE: asyncsite-* indices are not deleted to preserve production data
            else
              echo "WARNING: Elasticsearch not running, skipping index cleanup"
            fi
            
            # Wait and verify Filebeat is running
            sleep 10
            echo "Checking Filebeat status..."
            docker ps | grep filebeat-agent || echo "WARNING: Filebeat may not be running"
            docker logs asyncsite-filebeat-agent --tail 20 2>&1 || echo "Could not get Filebeat logs"
            
            # Check Elasticsearch indices
            echo "Current Elasticsearch indices:"
            docker exec elasticsearch curl -s "localhost:9200/_cat/indices?v" | grep -E "(filebeat|asyncsite)" || echo "No indices yet"
            
            # Verify Filebeat is using correct configuration
            echo "Verifying Filebeat configuration..."
            docker exec asyncsite-filebeat-agent cat /usr/share/filebeat/filebeat.yml | grep -E "(type:|output:|logstash)" | head -10 || echo "Could not read Filebeat config"
            
            # Send a test log to verify service-based indexing
            echo "Sending test log..."
            if docker ps | grep -q "asyncsite-user-service"; then
              docker exec asyncsite-user-service sh -c "echo '{\"timestamp\":\"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\",\"service\":\"user-service\",\"level\":\"INFO\",\"message\":\"CI/CD deployment test\"}' >&2"
              sleep 20
              echo "Checking for asyncsite-user-service index..."
              if docker ps | grep -q "elasticsearch"; then
                docker exec elasticsearch curl -s "localhost:9200/_cat/indices?v" | grep "asyncsite-user-service" || echo "Service-based index not yet created"
              else
                echo "WARNING: Elasticsearch container not found"
              fi
            fi
            
            # 4. 네트워크 생성 (없을 경우)
            echo "Creating Docker network if not exists..."
            docker network create asyncsite-network 2>/dev/null || echo "Network already exists"
            
            # 5. Kibana 인덱스 패턴 자동 설정 (최초 1회)
            echo "Setting up Kibana index patterns..."
            sleep 30
            docker compose -f docker-compose.yml -f docker-compose.server.yml up kibana-setup || echo "Index patterns may already exist"
            
            # Final status check
            echo "=== Final Status Check ==="
            echo "Running containers:"
            docker ps | grep -E "(elasticsearch|logstash|kibana|filebeat)" || echo "No ELK containers found"
            echo ""
            echo "Elasticsearch indices:"
            docker exec elasticsearch curl -s "localhost:9200/_cat/indices?v" | grep -E "(asyncsite-.*-2|filebeat-)" | sort || echo "No relevant indices found"
      
#      - name: Send Discord Notification
#        if: always()
#        env:
#          STATUS_COLOR: ${{ job.status == 'success' && '3066993' || '15158332' }}
#          STATUS_EMOJI: ${{ job.status == 'success' && '✅' || '❌' }}
#        run: |
#          curl -H "Content-Type: application/json" \
#               -X POST \
#               -d "{
#                 \"embeds\": [{
#                   \"title\": \"$STATUS_EMOJI infra-monitoring ELK Stack 배포 ${{ job.status }}\",
#                   \"color\": $STATUS_COLOR,
#                   \"fields\": [
#                     {\"name\": \"서비스\", \"value\": \"ELK Stack (Elasticsearch, Logstash, Kibana, Filebeat)\", \"inline\": false},
#                     {\"name\": \"브랜치\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
#                     {\"name\": \"배포자\", \"value\": \"${{ github.actor }}\", \"inline\": true},
#                     {\"name\": \"커밋\", \"value\": \"\`${GITHUB_SHA::8}\`\", \"inline\": false},
#                     {\"name\": \"시간\", \"value\": \"$(TZ=Asia/Seoul date +'%Y-%m-%d %H:%M:%S KST')\", \"inline\": false}
#                   ],
#                   \"footer\": {
#                     \"text\": \"AsyncSite CI/CD\"
#                   },
#                   \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
#                 }]
#               }" \
#               https://discord.com/api/webhooks/1399402822105038999/2qQDazifNKeW_c8MhHqcrw6Li5yDQtBL7f2JIBQ_b4qVT3Vxh7TfpMV3kBFnDYAFL3-h

name: Deploy ELK Stack to Mini PC

on:
  push:
    branches:
      - main
      - 'feature/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 배포할 코드(설정 파일 포함)를 GitHub Actions 러너 환경으로 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 러너에 있는 설정 파일들을 원격 Mini PC로 복사합니다.
      - name: Copy config files to Mini PC
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.MINI_PC_HOST }}
          username: ${{ secrets.MINI_PC_USER }}
          key: ${{ secrets.MINI_PC_SSH_KEY }}
          port: 2222
          source: "./docker-compose.yml,./docker-compose.filebeat.yml,./docker-compose.filebeat.server.yml,./docker-compose.server.yml,./filebeat-server.yml,./logstash"
          target: "~/elk-stack"
          rm: true # 복사 전 원격 디렉터리 내용 삭제

      # 3. Mini PC에 접속하여 Docker Compose를 실행합니다.
      - name: Execute docker-compose on Mini PC
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.MINI_PC_HOST }}
          username: ${{ secrets.MINI_PC_USER }}
          key: ${{ secrets.MINI_PC_SSH_KEY }}
          port: 2222
          script: |
            cd ~/elk-stack
            
            # 1. 메인 ELK 스택 (Elasticsearch, Logstash, Kibana) 실행
            echo "Starting ELK Stack..."
            docker compose -f docker-compose.yml up -d
            
            # 2. Filebeat 설정 파일 권한 변경
            echo "Changing ownership of filebeat-server.yml..."
            docker run --rm -v $(pwd)/filebeat-server.yml:/tmp/filebeat.yml alpine sh -c "chown 0:0 /tmp/filebeat.yml && chmod 600 /tmp/filebeat.yml"
            
            # 3. Filebeat 에이전트 재시작 (설정 변경 적용)
            echo "Restarting Filebeat Agent to apply new configuration..."
            # Force stop and remove Filebeat container and volumes to clear lock
            docker stop asyncsite-filebeat-agent 2>/dev/null || true
            docker rm -v asyncsite-filebeat-agent 2>/dev/null || true
            # Remove any lingering data directory that might have locks
            docker volume ls -q | grep filebeat | xargs -r docker volume rm 2>/dev/null || true
            # Start fresh
            docker compose -f docker-compose.filebeat.yml -f docker-compose.filebeat.server.yml up -d
            
            # Wait and verify Filebeat is running
            sleep 10
            echo "Checking Filebeat status..."
            docker ps | grep filebeat-agent || echo "WARNING: Filebeat may not be running"
            docker logs asyncsite-filebeat-agent --tail 20 2>&1 || echo "Could not get Filebeat logs"
            
            # 4. 네트워크 생성 (없을 경우)
            echo "Creating Docker network if not exists..."
            docker network create asyncsite-network 2>/dev/null || echo "Network already exists"
            
            # 5. Kibana 인덱스 패턴 자동 설정 (최초 1회)
            echo "Setting up Kibana index patterns..."
            sleep 30
            docker compose -f docker-compose.yml -f docker-compose.server.yml up kibana-setup || echo "Index patterns may already exist"
      
      - name: Send Discord Notification
        if: always()
        env:
          STATUS_COLOR: ${{ job.status == 'success' && '3066993' || '15158332' }}
          STATUS_EMOJI: ${{ job.status == 'success' && '✅' || '❌' }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"embeds\": [{
                   \"title\": \"$STATUS_EMOJI infra-monitoring ELK Stack 배포 ${{ job.status }}\",
                   \"color\": $STATUS_COLOR,
                   \"fields\": [
                     {\"name\": \"서비스\", \"value\": \"ELK Stack (Elasticsearch, Logstash, Kibana, Filebeat)\", \"inline\": false},
                     {\"name\": \"브랜치\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
                     {\"name\": \"배포자\", \"value\": \"${{ github.actor }}\", \"inline\": true},
                     {\"name\": \"커밋\", \"value\": \"\`${GITHUB_SHA::8}\`\", \"inline\": false},
                     {\"name\": \"시간\", \"value\": \"$(TZ=Asia/Seoul date +'%Y-%m-%d %H:%M:%S KST')\", \"inline\": false}
                   ],
                   \"footer\": {
                     \"text\": \"AsyncSite CI/CD\"
                   },
                   \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
                 }]
               }" \
               https://discord.com/api/webhooks/1399402822105038999/2qQDazifNKeW_c8MhHqcrw6Li5yDQtBL7f2JIBQ_b4qVT3Vxh7TfpMV3kBFnDYAFL3-h